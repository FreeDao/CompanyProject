package com.hiibox.houseshelter.util;

import android.annotation.SuppressLint;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.provider.Settings.Secure;

import com.hiibox.houseshelter.core.GlobalUtil;

/**
 * 定位服务
 * 
 * @author ln
 * 
 */
@SuppressLint("DefaultLocale")
public final class LocationUtil {

	/**
	 * 获取设备唯一标志�?
	 * 
	 * @author ganhx
	 * @return drivenToken 如果为空 返回13个A
	 */
	public static String getDrivenToken(Context context) {
		String drivenToken = Secure.getString(context.getContentResolver(),Secure.ANDROID_ID);
		if (drivenToken == null) {
			drivenToken = android.provider.Settings.System.getString(
					context.getContentResolver(),
					android.provider.Settings.System.ANDROID_ID);
			if (drivenToken == null) {
				return "AAAAAAAAAAAAA";
			}
		}
		return drivenToken;
	}

	/**
	 * 获取网络连接类型
	 */
	@SuppressLint("DefaultLocale")
	public static String checkNetWork(Context context) {
		ConnectivityManager connMgr = (ConnectivityManager) context
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
		String result = null;
		if (networkInfo == null) {
			result = GlobalUtil.NETWORK_NONE;
		} else {
			int nType = networkInfo.getType();
			if (nType == ConnectivityManager.TYPE_MOBILE) {
				if (networkInfo.getExtraInfo().toLowerCase().equals("cmnet")) {
					result = "CMNET";
				} else {
					result = "CMWAP";
				}
			} else if (nType == ConnectivityManager.TYPE_WIFI) {
				result = "WIFI";
			}
		}
		return result;
	}
	
	/**
	 * 判断WIFI网络是否可用
	 * @param context
	 * @return
	 */
	public static boolean isNetworkAvailable(Context context) {
		ConnectivityManager connMgr = (ConnectivityManager) context
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
		return networkInfo.isAvailable();
	}

	/**
	 * 获取当前经纬�?
	 */
	public static Location getCurrentLocation(Context context) {
		LocationManager locationManager = (LocationManager) context
				.getSystemService(Context.LOCATION_SERVICE);

		if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			Location location = locationManager
					.getLastKnownLocation(LocationManager.GPS_PROVIDER);
			return location;
		} else {
			if (GlobalUtil.NETWORK_NONE.equals(checkNetWork(context))) {
				return null;
			}
			locationManager.requestLocationUpdates(
					LocationManager.NETWORK_PROVIDER, 1000l, 0f,
					new LocationListener() {
						@Override
						public void onStatusChanged(String provider,
								int status, Bundle extras) {
						}

						@Override
						public void onProviderEnabled(String provider) {
						}

						@Override
						public void onProviderDisabled(String provider) {
						}

						@Override
						public void onLocationChanged(Location location) {
						}
					});
			Location location = locationManager
					.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
		
			//MessageUtil.alertMessage(context, "获取成功");
			return location;
		}
	}
	
}
