package com.hiibox.houseshelter.activity;

import net.tsz.afinal.annotation.view.ViewInject;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.Selection;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.hiibox.houseshelter.BaseActivity;
import com.hiibox.houseshelter.BaseApplication;
import com.hiibox.houseshelter.R;
import com.hiibox.houseshelter.core.ActivityManager;
import com.hiibox.houseshelter.core.GlobalUtil;
import com.hiibox.houseshelter.net.Frame;
import com.hiibox.houseshelter.net.TCPServiceClientV2.CommandListener;
import com.hiibox.houseshelter.service.PushMessageService;
import com.hiibox.houseshelter.util.ImageOperation;
import com.hiibox.houseshelter.util.LocationUtil;
import com.hiibox.houseshelter.util.MessageUtil;
import com.hiibox.houseshelter.util.PreferenceUtil;
import com.hiibox.houseshelter.util.StringUtil;

/**
 * @Description 密码设置（修改）
 * @Author wangjiang
 * @Create Date 2013-10-30 下午2:10:13
 * @Modified By 
 * @Modified Date 
 * @Modified Description 
 */
public class PasswordSettingActivity extends BaseActivity {

    @ViewInject(id = R.id.root_layout) LinearLayout rootLayout;
    @ViewInject(id = R.id.back_iv, click = "onClick") ImageView backIV;
    @ViewInject(id = R.id.confirm_modification_tv, click = "onClick") TextView confirmTV;
    @ViewInject(id = R.id.old_password_et) EditText oldPswET;
    @ViewInject(id = R.id.new_password_et) EditText newPswET;
    @ViewInject(id = R.id.confirm_new_password_et) EditText confirmPswET;
    @ViewInject(id = R.id.progress_bar) ProgressBar progressBar;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_password_setting_layout);
    }
    
    public void onClick(View v) {
        if (v == backIV) {
            ActivityManager.getScreenManager().exitActivity(mActivity);
        } else if (v == confirmTV) {
            String oldPsw = oldPswET.getText().toString();
            String password = PreferenceUtil.getInstance(mContext).getString("password", null);
            if (StringUtil.isNotEmpty(password) && !oldPsw.equals(password)) {
                setFocusable(oldPswET, R.string.prompt_input_mistake_password);
                return;
            }
            String newPsw = newPswET.getText().toString();
            if (StringUtil.isEmpty(newPsw)) {
                MessageUtil.alertMessage(mContext, R.string.prompt_input_new_password);
                return;
            }
            String confirmNewPsw = confirmPswET.getText().toString();
            if (StringUtil.isEmpty(confirmNewPsw)) {
                MessageUtil.alertMessage(mContext, R.string.prompt_input_new_password_again);
                return;
            }
            if (!newPsw.equals(confirmNewPsw)) {
                MessageUtil.alertMessage(mContext, R.string.prompt_input_diffrient_password);
                newPswET.setText("");
                confirmPswET.setText("");
                return;
            }
            modifyPassword(oldPsw, newPsw);
        }
    }
    
    private void modifyPassword(String oldPsw, final String newPsw) {
    	if (LocationUtil.checkNetWork(mContext).endsWith(GlobalUtil.NETWORK_NONE)) {
        	MessageUtil.alertMessage(mContext, R.string.sys_network_error);
        	startActivity(new Intent("android.settings.WIRELESS_SETTINGS"));
        	return;
        }
		String phone = PreferenceUtil.getInstance(getApplicationContext()).getString("phone", null);
		if (StringUtil.isEmpty(phone)) {
			MessageUtil.alertMessage(mContext, R.string.please_login);
			if (null != BaseApplication.mainClient) {
            	BaseApplication.mainClient.stop();
            	BaseApplication.mainClient = null;
            }
            if (null != BaseApplication.fileClient) {
            	BaseApplication.fileClient.stop();
                BaseApplication.fileClient = null;
            }
            stopService(new Intent(mContext, PushMessageService.class));
			startActivity(new Intent(mContext, LoginActivity.class));
			ActivityManager.getScreenManager().exitAllActivityExceptOne();
			return;
		}
		if (null == BaseApplication.mainClient || !BaseApplication.mainClient.isConnected()) {
    		BaseApplication.initTcpManager();
            BaseApplication.mainClient = BaseApplication.tcpManager.getMainClient(phone, null, "1111111111111111", "66666666");
    	}
		progressBar.setVisibility(View.VISIBLE);
		BaseApplication.mainClient.paramPasswordSet(phone, oldPsw, newPsw, new CommandListener() {
			@Override
			public void onTimeout(Frame src, Frame f) {
				handler.sendEmptyMessage(0);
			}
			
			@SuppressWarnings("unused")
			@Override
			public int onReceive(Frame src, Frame f) {
				Log.d("PasswordSettings", "onReceive()   data ="+f.strData+";");
				if (null != f) {
					if (StringUtil.isNotEmpty(f.strData)) {
						if (f.strData.equals("0")) {
							PreferenceUtil.getInstance(mContext).saveString("password", newPsw);
							handler.sendEmptyMessage(3);
						} else {
							handler.sendEmptyMessage(4);
						}
					} else {
						handler.sendEmptyMessage(2);
					}
				} else {
					handler.sendEmptyMessage(1);
				}
				return 0;
			}
		});
	}
    
    @SuppressLint("HandlerLeak")
	private Handler handler = new Handler(){
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			progressBar.setVisibility(View.GONE);
			if (msg.what == 0) {
				MessageUtil.alertMessage(mContext, R.string.network_timeout);
			} else if (msg.what == 1) {
				MessageUtil.alertMessage(mContext, R.string.network_not_response);
			} else if (msg.what == 2) {
				MessageUtil.alertMessage(mContext, R.string.receive_mistake_info);
			} else if (msg.what == 3) {
				MessageUtil.alertMessage(mContext, R.string.operate_success);
				ActivityManager.getScreenManager().exitActivity(mActivity);
			} else if (msg.what == 4) {
				MessageUtil.alertMessage(mContext, R.string.operate_failed);
			}
		}
    };

	public void setFocusable(EditText editText, int msg) {
        editText.setText("");
        editText.setFocusableInTouchMode(true);
        editText.setFocusable(true);
        editText.requestFocus();
        Editable editable = editText.getText();
        Selection.setSelection(editable, 0);
        MessageUtil.alertMessage(mContext, msg);
    }
    
	@Override
    protected void onResume() {
        super.onResume();
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        BitmapDrawable bitmapDrawable = new BitmapDrawable(
            ImageOperation.readBitMap(mContext, R.drawable.bg_app));
        rootLayout.setBackgroundDrawable(bitmapDrawable);
    }
    
    @Override
    protected void onStop() {
        super.onStop();
        rootLayout.setBackgroundDrawable(null);
    }
    
    @Override
    protected void onDestroy() {
    	super.onDestroy();
    	handler.removeCallbacks(null);
    }
    
}
